#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'vcloud/start_stop.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |status|
    op_list = Hash.new
    exit_now!(1, "Can't define power vdc and vapps choose one or the other") if options[:power_vdc] and options[:vapps]
    exit_now!(1, "You must define status as start or stop or destroy") unless status.downcase =~ /st(art|op)/ || status.downcase == 'destroy'
    exit_now!(1, "You must define power_vdc or vapps, you defined neither") if not options[:power_vdc] and not options[:vapps]
    
    %w(user password host org vdc).each do |op|
      state(op) unless options[op]
    end

    if options[:vapps]
      op_list[:vapps] = options[:vapps].split(',').map(&:strip).reject { |c| c.empty? }
    end
    op_list[:power_vdc] = options[:power_vdc] if options[:power_vdc]
    sfunc = Vcloud::StartStop::Run.new(options[:user],
                                       options[:password],
                                       options[:host],
                                       options[:org],
                                       options[:vdc],
                                       status,
                                       op_list)
    sfunc.run
  end

  def self.state(option)
    exit_now!(1, "You must define #{option} and it's not defined")
  end


  description "start and stop vapps on vcloud director" 

 
  on("-u USER", "--user", "The user to connect as")
  on("-p PASS", "--password", "The password for the account")
  on("-h HOST", "--host", "The hostname of the skyscape api")
  on("-o ORG", "--org", "The name of the organization")
  on("-v VDC", "--vdc", "The name of the VDC")
  on("--power_vdc", "Stop entire VDC")
  on("--vapps VAPP1,VAPP2", "--vapps", "List of the vapps either quoted comma separated list with spaces or unquoted without spaces vapp,vapp2,vapp3 or \"vapp1, vapp2, vapp3\"")
    
  arg :status, "Start or Stop or Destroy"
  version Vcloud::StartStop::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
